def task1_1(A):
  RowCount = 0
  ColCount = 0
  DataType = 1
  
  while RowCount <= 2 and DataType:
    while ColCount <= 2 and DataType:
      if type(A[RowCount][ColCount]) in (int, float, complex):
        ColCount += 1        
      else:
        DataType = 0    
    ColCount = 0
    RowCount += 1

  if DataType == 0:
    return False
  else:
    return True

def task1_2(A, Row, Col):
  TopLeftNum = 0
  BottomLeftNum = 0
  TopRightNum = 0
  BottomRightNum = 0 

  if (Row == 1) and (Col == 1):
    TopLeftNum = A[Row][Col]
    BottomLeftNum = A[Row + 1][Col]
    TopRightNum = A[Row][Col + 1]
    BottomRightNum = A[Row + 1][Col + 1]
  elif (Row == 2) and (Col == 1):
    TopLeftNum = A[Row - 2][Col]
    BottomLeftNum = A[Row][Col]
    TopRightNum = A[Row - 2][Col + 1]
    BottomRightNum = A[Row][Col+1]
  elif (Row == 3) and (Col == 1):
    TopLeftNum = A[Row - 3][Col]
    BottomLeftNum = A[Row-2][Col]
    TopRightNum = A[Row - 3][Col + 1]
    BottomRightNum = A[Row-2][Col+1]
  elif (Row == 1) and (Col == 2):
    TopLeftNum = A[Row][Col - 2]
    BottomLeftNum = A[Row + 1][Col - 2]
    TopRightNum = A[Row][Col]
    BottomRightNum = A[Row + 1][Col]
  elif (Row == 2) and (Col == 2):
    TopLeftNum = A[Row - 2][Col - 2]
    BottomLeftNum = A[Row][Col - 2]
    TopRightNum = A[Row - 2][Col]
    BottomRightNum = A[Row][Col]
  elif (Row == 3) and (Col == 2):
    TopLeftNum = A[Row - 3][Col - 2]
    BottomLeftNum = A[Row - 2][Col - 2]
    TopRightNum = A[Row - 3][Col]
    BottomRightNum = A[Row - 2][Col]
  elif (Row == 1) and (Col == 3):
    TopLeftNum = A[Row][Col - 3]
    BottomLeftNum = A[Row+1][Col - 3]
    TopRightNum = A[Row][Col - 2]
    BottomRightNum = A[Row + 1][Col - 2]
  elif (Row == 2) and (Col == 3):
    TopLeftNum = A[Row - 2][Col - 3]
    BottomLeftNum = A[Row][Col - 3]
    TopRightNum = A[Row-2][Col-2]
    BottomRightNum = A[Row][Col-2]
  elif (Row == 3) and (Col == 3):
    TopLeftNum = A[Row-3][Col - 3]
    BottomLeftNum = A[Row-2][Col - 3]
    TopRightNum = A[Row - 3][Col - 2]
    BottomRightNum = A[Row - 2][Col - 2]

  minorA = (TopLeftNum * BottomRightNum) - (BottomLeftNum * TopRightNum)
  return minorA

def task1_3(A):
  Tem1 = A[0][0] * task1_2(A,1,1)
  Tem2 = A[0][1] * task1_2(A,1,2)
  Tem3 = A[0][2] * task1_2(A,1,3)

  return Tem1 - Tem2 + Tem3


A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print('task 1.2 is:',task1_2(A,1,1))
print('task 1.3 is:',task1_3(A))
